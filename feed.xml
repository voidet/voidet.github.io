<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>manageering.</title>
		<description>{&quot;meta&quot;=&gt;&quot;An Engineering Manager in San Francisco. Has Thoughts. Has typed these thoughts&quot;, &quot;subtitle&quot;=&gt;&quot;Thoughts from an Engineering Manager&quot;}</description>
		<link>http://manageering.us</link>
		<atom:link href="http://manageering.us/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>The Root of High Performing Teams</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;I don’t know why it didn’t dawn on me earlier. I’ve been in high performing teams for most of my career. It’s exciting, invigorating. Your job is your hobby, you love the team you’re in. The dynamic is fast yet fluid, some sort of harmonious balance between stress and exhileration. It can be addictive; but while you’re in it you cannot imagine working on a team in any other way, until you’re working on a team that doesn’t.&lt;/p&gt;

&lt;h2 id=&quot;the-gap&quot;&gt;The Gap&lt;/h2&gt;

</description>
				
				<pubDate>Mon, 11 Dec 2017 00:00:00 -0800</pubDate>
				<link>http://manageering.us/2017/12/11/the-root-of-high-performing-teams/</link>
				<guid isPermaLink="true">http://manageering.us/2017/12/11/the-root-of-high-performing-teams/</guid>
			</item>
		
			<item>
				<title>Product Engineers</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;Throughout my career I’ve witnessed varying levels of engagement from developers.&lt;/p&gt;
</description>
				
				<pubDate>Mon, 04 Dec 2017 00:00:00 -0800</pubDate>
				<link>http://manageering.us/2017/12/04/product-engineers/</link>
				<guid isPermaLink="true">http://manageering.us/2017/12/04/product-engineers/</guid>
			</item>
		
			<item>
				<title>Why You Need To Invest In Tests</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;As an engineering manager have you ever been on a project where your developers are far too scared to touch a line of code? How long is your manual quality assurance team spending on regression efforts? How many users are complaining features, new and old, are breaking when they’re trying to use them? How often is your boss coming to you asking why in the world your team’s progress seems to be either slowing, or even worse, going backwards? I’ll admit that I’ve been on many teams with this nightmarish fear; we moved slow, we broke things, we wanted to start again.&lt;/p&gt;

&lt;h2 id=&quot;building-a-deck-without-sealing-it&quot;&gt;Building a deck without sealing it&lt;/h2&gt;

&lt;p&gt;I like to think of the analogy of building a deck but not sealing it. Sure you can go and spend 2 months building a deck, then start building &amp;amp; installing railings. Then you might move onto building the planter boxes. But in the 3 months you spent building all these auxiliary features your deck has degraded because you didn’t seal it. If you had of put a seal on it your previous work would of remained in tact even though you were carrying on building items on top of it.&lt;/p&gt;

&lt;p&gt;Code is just like this analogy, it rots. It degrades over time the more change that builds up around it. This is why it is good to invest time, effort and lets face it, money, into securing the efforts we have previously put in.&lt;/p&gt;

&lt;h2 id=&quot;welcome-to-tests&quot;&gt;Welcome to tests&lt;/h2&gt;

&lt;p&gt;Tests ensure what you’re inspecting produces the expected outcome. They come in many forms, but my prime focus will be on unit testing. Essentially unit tests are a way to ensure that a particular input generates a particular output. Unit tests are a means of testing isolated &lt;em&gt;units&lt;/em&gt; of code to ensure they are meeting expectations. So let’s take some code as an example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMorning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMorning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Good Morning!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Night Night!&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now this example may not even be that far removed from something you might actually see in your code base. A simple bit of logic that produces a specific outcome. Its simple, but very much a common application. Let’s just see what a test would look like to ensure that this method will only ever return the input that it gets sent:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testSayGreetingReturnExpectedGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;XCTAssertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sayGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Good Morning!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;XCTAssertEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sayGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Night Night!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that we test both the true and false inputs to ensure the outputs are indeed saying goodnight when its night. It means if we ever change this method to do something additional, these tests should break! For example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sayGreeting&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMorning&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isMorning&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Good Morg!&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;nigh nigh!&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Would fail these tests, in both cases.&lt;/p&gt;

&lt;h2 id=&quot;writing-code-then-tests&quot;&gt;Writing code then tests&lt;/h2&gt;

&lt;p&gt;So when do we write tests? Sometimes developers will write tests after the fact. However that can be risky from many perspectives. The biggest issue is that we’re human. Instead of analyzing the business rules that should be tested, instead we start to examine what the code does and write tests that simply cover what we’ve written. Let’s look at a simple example you may see in your code base, then we’ll look at all the possibilities where this could go wrong.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;formatCurrency&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;currencyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%@%.2f&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currencyCode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;angle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see here that we take in a currencyCode and then an amount and return a formatted price with two decimals. So from this example you can start to gather some expectations simply based on the method signature and return type. Let’s break these expectations down:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Must have a currency symbol&lt;/li&gt;
  &lt;li&gt;Must only have two decimal places&lt;/li&gt;
  &lt;li&gt;Must have two decimal places even if the number is a whole number&lt;/li&gt;
  &lt;li&gt;Currency code can have many characters&lt;/li&gt;
  &lt;li&gt;Must return concatenation of both inputs to form a string&lt;/li&gt;
  &lt;li&gt;Currency code can be 0 length&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So we have many expectations of what this method can return. Obviously the above code block doesn’t cater to all of these expectations; which is why…. writing code first sets false expectations. This is also why writing tests first ensures that we cater to all the business needs as well as acting as enforcers for proper implementation code to be written.&lt;/p&gt;

&lt;h2 id=&quot;test-driven-development&quot;&gt;Test Driven Development&lt;/h2&gt;

&lt;p&gt;You’ve seen how wrong the above formatCurrency function could end up, simply by missing so many expectations. So how should we write our code? Red to Green.&lt;/p&gt;

&lt;p&gt;Welcome to Test driven development (&lt;strong&gt;TDD&lt;/strong&gt;). TDD is a development paradigm whereby logic is built up in test cases initially. These test cases are run against missing implementations, in turn, they fail, the tests return red. Once all expectations are defined in tests for a particular unit of code then implementation begins. The unit test cases are continuously run (sometimes even automatically once save is pressed) against the implementation. It can then be defined that once all test cases pass then the implementation is complete.&lt;/p&gt;

&lt;p&gt;The beauty of working in this environment is that you’re actually investing in security whilst also working off of a template for your implementation. This goes one step further, lets assume your team has exceptional test coverage as you’ve been doing TDD for quite sometime. If your implementation somehow introduces side effects into the code base, in that other units of code are affected by the output or changes your code introduces, the test cases of these implementations will also alert you that you’ve broken their contracts!&lt;/p&gt;

&lt;h2 id=&quot;pushback-on-tdd-as-an-em&quot;&gt;Pushback on TDD as an EM&lt;/h2&gt;

&lt;p&gt;Here are some items of challenge you may receive in your position as an engineering manager:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;TDD is too slow, I just want to code and ship this thing!&lt;/p&gt;

    &lt;p&gt;This is all well and good, but is this person investing their money in this product? Will they be here 10 years from now to help maintain the code they are writing? You want to ensure your code has longevity and don’t think that comes from just readability. Readability in itself is not longevity of code, architecture is not longevity of code; both of these items introduce efficiencies for future developers, but that isn’t longevity. longevity of code is code that doesn’t rot. It’s code that people aren’t afraid to touch, no matter how readable it seemingly may be. Readability can escalate to “this one line fix is simple”… to an over the weekend outage quite easily. Without tests, you have an uninsured investment. Make no mistake of this.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I’ll write the tests in the next sprint or as a fast follow&lt;/p&gt;

    &lt;p&gt;Well there’s a red flag already. The tests were not written side by side with the code in the first place. How are you so sure all the proper logic has been baked in and edge cases thought of without putting the logic and cases in isolation? Push back and demand excellence from your developers. Challenge them that no code should be introduced that does not have the proper insurance placed upon it. Sure their code may run, but who’s to say a merge conflict shortly after may in fact break their code?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;I didn’t write tests in my last job, we got stuff out the door faster than Amazon prime!&lt;/p&gt;

    &lt;p&gt;This is an easy one. Ask how they think the developers feel that took their job at their last organization? How would they like to operate in a codebase with no security that what they’re touching isn’t going to introduce some unwanted, no, just any side effect. I would like to hear the justification of this. If there is no resolution start gathering data on how many defects come back from the stories without tests. This includes other developers breaking their code. This will tell you how valuable those tests would of been and make the case for investment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This is just throwaway code anyway!&lt;/p&gt;

    &lt;p&gt;I mean, a hotfix or a patch happens. Some requirement wasn’t captured, a developer or QA member didn’t read the acceptance criteria properly and something got out into regression that was unexpected. I understand you want to fix fast and move forward. But if you don’t do it now, honestly, do you and your developers have the discipline to do it later? Hold off the release and be the gatekeeper your codebase desperately needs you to be. Don’t let it in unless you have a security guard protecting the interests of that logic. No tests, you’re not coming in. Ultimately, your job is to ensure results, lets make these results be a high defect count.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;more-reading&quot;&gt;More Reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zEps8u&quot;&gt;Clean Code: A Handbook of Agile Software Craftsmanship &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zEpxsO&quot;&gt;Essential Scrum: A Practical Guide to the Most Popular Agile Process&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zFaEXs&quot;&gt;Test-Driven iOS Development with Swift 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zFaEXs&quot;&gt;iOS Programming: The Big Nerd Ranch Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Tue, 07 Nov 2017 00:00:00 -0800</pubDate>
				<link>http://manageering.us/2017/11/07/why-you-need-to-invest-in-tests/</link>
				<guid isPermaLink="true">http://manageering.us/2017/11/07/why-you-need-to-invest-in-tests/</guid>
			</item>
		
			<item>
				<title>Value &amp; Reference Types</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;Value and reference types are different ways in which data gets stored/accessed as it flows through your application. They both have implications on performance &amp;amp; architecture. Both introduce complexities of which when mishandled can introduce some unexpected behaviors in your application’s performance, aka bugs.&lt;/p&gt;

&lt;p&gt;We’ll compare both value and reference types below using the analogy of a garden gnome, named &lt;em&gt;Phil&lt;/em&gt;. You’ll then be able to distinguish when you may or may not want to use reference or value types in your application.&lt;/p&gt;

&lt;h2 id=&quot;reference-types&quot;&gt;Reference types&lt;/h2&gt;

&lt;p&gt;A reference can be thought of as an address; that being an address in memory. For our example &lt;em&gt;Phil&lt;/em&gt; the garden gnome. Phil has a street address (he lives in a garden, but he still has an address). If we want to talk about Phil, we reference him by his street address. There can be many Phil’s in the world, I mean let’s face it Phil came from a factory. But there is only one Phil at this street address: I’m talking about &lt;em&gt;Phil&lt;/em&gt; at “789 Main Street, North Pole”.&lt;/p&gt;

&lt;p&gt;So what do references mean in code? Well you might see examples of:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;myFunction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot;&gt;- (NSString *)myFunction(NSString *input) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here you can see multiple ways to declare that the input is of type reference. The *’s or the fact that it’s inout or sometimes you see “&amp;amp;” before a variable, all indicate you are pointing to a reference of an object; a particular memory address.&lt;/p&gt;

&lt;p&gt;When dealing with references, you’re dealing with one object, one space in memory. That address is a memory address. Like Phil, when you send a letter to Phil at 789 Main Street, North Pole, you’re sending a message to that one Phil.&lt;/p&gt;

&lt;p&gt;Of course Phil can receive multiple letters from multiple sources. This gets tricky when you start to modify Phil. Multiple messages or multiple actions that affect Phil can change other peoples expectations. Let’s take the following Swift code as an example:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;phil&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Phil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// This is somewhere in the code&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Painter A&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paintPants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Painter B&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;phil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;paintPants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Green&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So what color are Phil’s pants? Well it depends on who called paintPants last! So if Painter A depended on the fact that Phil’s pants were Red to paint Phil’s shirt, then, they might actually be green! This is called a &lt;strong&gt;race condition&lt;/strong&gt;, and reference types are susceptible to this side effect. It can lead to unexpected behavior; bugs.&lt;/p&gt;

&lt;h2 id=&quot;value-types&quot;&gt;Value types&lt;/h2&gt;

&lt;p&gt;Next we’ll look at value types. Value types are exactly that, they are variables that contain values. The variables are not pointers to another point in memory, instead the value explicitly points to its own space in memory, no other place. So what does that mean in contrast to &lt;strong&gt;reference types&lt;/strong&gt;? Let’s take a look at a value type sequentially then vs a reference type.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gnome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gnome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Phil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnomeB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gnome&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gnomeB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Robert&quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns Phil&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnomeB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns Robert&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Above you can see that the assignment of gnome to gnomeB introduces some sideeffects for how the variables get used further on in code. When we do &lt;code class=&quot;highlighter-rouge&quot;&gt;gnomeB = gnome&lt;/code&gt; we’re actually creating a copy in our memory. We in effect take a copy of gnome, put it in its own memory address, from then on the original Gnome won’t be modified if using this copy.&lt;/p&gt;

&lt;p&gt;How is this a value type? The above example is in Swift. Swift has value types such as Structs and primitive values. So we know if its a struct we can expect copies.&lt;/p&gt;

&lt;p&gt;Let’s now play out the above example using a reference type. Again using swift we’ll change the struct to be a class type, a reference type:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gnome&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;

  &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnome&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Gnome&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Phil&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;gnomeB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gnome&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gnomeB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Robert&quot;&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns Robert&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnomeB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns Robert&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So we can see above that they both print “Robert”. We’re using pointers, or references, to modify the one location in memory.&lt;/p&gt;

&lt;h2 id=&quot;the-memory&quot;&gt;The memory&lt;/h2&gt;

&lt;p&gt;From the two examples above lets print out their memory addresses to prove value vs reference types are all about how we store and access our variables in memory:&lt;/p&gt;

&lt;h3 id=&quot;reference-types-1&quot;&gt;Reference types&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;withUnsafePointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0x000060c0000584c0&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;withUnsafePointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnomeB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0x000060c0000584c0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;value-types-1&quot;&gt;Value types&lt;/h3&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;withUnsafePointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnome&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0x000000011ace3830&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;withUnsafePointer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gnomeB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 0x000000011ace3848&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can see that the same memory address was used for reference types, but a new address for value types.&lt;/p&gt;

&lt;h2 id=&quot;more-reading&quot;&gt;More reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://amzn.to/2yfzBUV&quot;&gt;Swift Algorithms &amp;amp; Data Structures&lt;/a&gt; (I helped write a chapter)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://amzn.to/2yeIBJU&quot;&gt;Swift Programming: The Big Nerd Ranch Guide (2nd Edition)&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;​&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Mon, 06 Nov 2017 00:00:00 -0800</pubDate>
				<link>http://manageering.us/2017/11/06/value-and-reference-types/</link>
				<guid isPermaLink="true">http://manageering.us/2017/11/06/value-and-reference-types/</guid>
			</item>
		
			<item>
				<title>MVVM for EMs</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;Firstly let’s get the acronym out of the way. MVVM stands for model, view, view-model. It has a nice symmetry, but there are three components here and they all have separate responsibilities. The main purpose of MVVM is to keep business logic in a single place; the view model. All dependencies that are required to show something on the screen, to calculate something, all fall under the jurisdiction of the view-model. Let’s take a look at the responsibilities of each of the three components.&lt;/p&gt;

&lt;h2 id=&quot;model&quot;&gt;Model&lt;/h2&gt;

&lt;p&gt;This is the first &lt;strong&gt;M&lt;/strong&gt; of &lt;strong&gt;MVVM&lt;/strong&gt;. The model’s sole task, and it is a basic one, is simply to store data. There is no logic in the &lt;strong&gt;model&lt;/strong&gt;, no network calls. Simply a bunch of properties and potentially some handling of data to get these properties filled. For instance you may place some JSON parsing in the &lt;strong&gt;model&lt;/strong&gt; object, but no transformation will be done outside the realm of mapping.&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;totalPrice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;30.99&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;currencySymbol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;currencyCode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;USD&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;view&quot;&gt;View&lt;/h2&gt;

&lt;p&gt;The next component is the view, the next &lt;strong&gt;V&lt;/strong&gt; in the &lt;strong&gt;MVVM&lt;/strong&gt; acronym. This is simple. It’s the stuff you see on screen, or whatever the client will consume. In the case of of a mobile app, the view may be a button, a label, or even an entire login screen. For an API the &lt;strong&gt;V&lt;/strong&gt; may be the JSON that gets sent out to the client.&lt;/p&gt;

&lt;p&gt;There is no logic in the &lt;strong&gt;view&lt;/strong&gt;. The &lt;strong&gt;view&lt;/strong&gt; simply read values, or, in some cases, reacts to values, that get passed in. By the:&lt;/p&gt;

&lt;h2 id=&quot;view-model&quot;&gt;View model&lt;/h2&gt;

&lt;p&gt;I left this for last, but it is the &lt;strong&gt;VM&lt;/strong&gt; in &lt;strong&gt;MVVM&lt;/strong&gt;. This is where the meat and bones are. This is where all the logic, all the handling, all the updates, all the treatment gets done. The view model is the middleman between the view and the model. It’s job is to take ownership of all the business logic, view logic, server call logic. A &lt;strong&gt;view&lt;/strong&gt; model takes in &lt;strong&gt;model&lt;/strong&gt; objects, or other &lt;strong&gt;view models&lt;/strong&gt;, and composes itself in a way that will set itself up to give a &lt;strong&gt;view&lt;/strong&gt; what it needs. It will hand the &lt;strong&gt;view&lt;/strong&gt; direct, hopefully, flat mapped properties for the &lt;strong&gt;view&lt;/strong&gt; to read.&lt;/p&gt;

&lt;p&gt;So what does it look like?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/mvvm.png&quot; alt=&quot;mvvm&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;real-world-example&quot;&gt;Real world example&lt;/h2&gt;

&lt;p&gt;Let’s take a real world example. Let’s say we want to present the user a total price for their holiday. This will involve:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;A network call&lt;/li&gt;
  &lt;li&gt;A place to store the total cost amount&lt;/li&gt;
  &lt;li&gt;Some beautification of the total cost amount&lt;/li&gt;
  &lt;li&gt;A view to present the user the total amount&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We’ll now break it down using some swift to showcase how this all looks then talk about the lifecycle.&lt;/p&gt;

&lt;h3 id=&quot;the-model&quot;&gt;The model&lt;/h3&gt;

&lt;p&gt;You can ignore the init method in the example below. This is just an example that parsing and mapping concerns can lay with the model object. The example parses in a JSON object and stores the &lt;em&gt;totalPrice&lt;/em&gt; from that object, storing it into price on TripPrice. This is not a view concern, logic or formatting outside of marshaling data presented from the server into the model object. Really, if you’re doing your API layer correctly for a client &amp;lt;-&amp;gt; server relationship, this really should be flat mapped and one to one easily parsed.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPrice&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;jsonResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;totalPrice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-view&quot;&gt;The view&lt;/h3&gt;

&lt;p&gt;Here you can see we need to initialize our PriceLabel object with a &lt;strong&gt;TripPriceViewModel&lt;/strong&gt;. When we do we call the internal method of updateView, which will read the property totalPriceText and set it on the text. Long story short, make a new label and give it a view model, it will automatically update that label’s text with the totalPriceText from that view model.&lt;/p&gt;

&lt;p&gt;There is a binding mechanism here also. So after a tripPrice is fetched, the &lt;strong&gt;view model&lt;/strong&gt; will report back with the text that the view should update itself to. This binding is &lt;code class=&quot;highlighter-rouge&quot;&gt;viewModel.tripUpdatedCallback = { text in&lt;/code&gt; and is a simple example of a callback.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PriceLabel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UILabel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPriceViewModel&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPriceViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tripUpdatedCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;updateView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalPriceText&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The main thing to pay attention to here is the setting of the viewModel, and the &lt;em&gt;updateView&lt;/em&gt; method and what that does.&lt;/p&gt;

&lt;h3 id=&quot;the-view-model&quot;&gt;The view model&lt;/h3&gt;

&lt;p&gt;The view model now does all the logic for us. You can see there is some handling done in order to calculate the &lt;code class=&quot;highlighter-rouge&quot;&gt;totalPriceText&lt;/code&gt;. This first checks if we have a price value, if we don’t we report back that we’re &lt;em&gt;fetching total price&lt;/em&gt; otherwise we stitch together some pricing text.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;fetchResults&lt;/code&gt; is the otherside of the coin for that binding to the view. We do some network calls out to the webservice to get our tripPrice. We then make a TripPrice object and then use the callback to report the updated text, which should be formatted if we have a properly formatted TripPrice.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPriceViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tripPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tripUpdatedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)?&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;totalPriceText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tripPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Fetching total price&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;The total trip price is $&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;tripPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tripPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tripPrice&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;fetchResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fetchResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//Fetch some JSON and return it&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tripPrice&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;tripUpdatedCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalPriceText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;stitching-it-all-together&quot;&gt;Stitching it all together&lt;/h3&gt;

&lt;p&gt;So what does this all mean? Let’s talk about how this all would play in together. Part of our view layer would also be a ViewController. A view controller is quite standard and you would be familiar with it in the MVC world. It’s part of the view lifecycle for a Mobile App, a presenter, a VC.&lt;/p&gt;

&lt;p&gt;There is minimal logic in the VC as you can see below. Instead it is mainly just used to marshall previous ViewModel objects and handle data flow to place onto view objects etc. There is no logic here outside of the life cycle of a viewController (loading and setting up views).&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPriceViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UIViewController&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tripPriceViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPriceViewModel&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;totalPriceLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PriceLabel&lt;/span&gt;

    &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TripPriceViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tripPriceViewModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;totalPriceLabel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;PriceLabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;viewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;reactive-functional-programming--mvvm&quot;&gt;Reactive functional programming &amp;amp; MVVM&lt;/h2&gt;

&lt;p&gt;There is another mechanism for views to be made aware that they need to redraw, thats in the form of signals with reactive functional programming (&lt;strong&gt;RFP&lt;/strong&gt;). Look up &lt;strong&gt;reactive functional programming&lt;/strong&gt; if you would like to see this concept applied to MVVM. In short, there’s a constant stream of signals being sent from the view models. The views subscribe to these signals, much like a FM radio, constantly listening. If the view hears something that interests them, like say “Hide Checkout Button” then the view will pick that value up and set its checkout button to hidden. The MVVM never hold view logic, as in, it doesn’t know what element to hide, nor what property its values are getting set on. It simply holds state and the logic of that state.&lt;/p&gt;

&lt;p&gt;So when the view gets a signal “Hide Checkout Button”, in the &lt;strong&gt;view model&lt;/strong&gt; you will see something like:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkoutButtonShouldBeVisible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;but then in the &lt;strong&gt;view&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkoutButtonShouldBeVisible&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;checkoutButton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;benefits-of-mvvm&quot;&gt;Benefits of MVVM&lt;/h2&gt;

&lt;h3 id=&quot;modular-is-better&quot;&gt;Modular is better&lt;/h3&gt;

&lt;p&gt;As you can see the view model is very modular. You pass in dependencies that it needs. Functions of the view model are broken down per responsibility and have minimal mutation on the object. This means testing becomes a breeze and is MVVM’s biggest win for me. You’re set up for dependency injection, meaning, you can pass in all the objects and their values without having to set up the view hierarchy, set up viewControllers etc. You’re then able to mock all the objects you like and build test coverage on a myriad of scenarios, all whilst testing the view model only.&lt;/p&gt;

&lt;h3 id=&quot;rfp&quot;&gt;RFP&lt;/h3&gt;

&lt;p&gt;When RFP is thrown into the mix, MVVM comes into its own. The ability for a view to react to the change of a properties state automatically is powerful. RFP comes with its own challenges though, and for that I don’t use it on the iOS platform (debugging is/was hell). Binding VM property state to properties on views allows direct mapping of state to view side effects. It’s powerful, but with great power, comes great debugging. Be warned, you can go overboard with signals and RFP.&lt;/p&gt;

&lt;h3 id=&quot;maintainability&quot;&gt;Maintainability&lt;/h3&gt;

&lt;p&gt;No longer is your logic spread over multiple files for a particular screen. You can easily narrow in on a particular area of your app and know (hopefully) that all of its associated logic is in its counterpart ViewModel file. Having logic in a centralized place for a particular concern is a big win for maintainability.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zj4qvl&quot;&gt;Clean Code: A Handbook of Agile Software Craftsmanship&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zhT2Qr&quot;&gt;The Pragmatic Programmer: From Journeyman to Master&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zhTj5V&quot;&gt;Android Programming: The Big Nerd Ranch Guide (3rd Edition)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zhTFth&quot;&gt;iOS Programming: The Big Nerd Ranch Guide (6th Edition)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Fri, 03 Nov 2017 00:00:00 -0700</pubDate>
				<link>http://manageering.us/2017/11/03/mvvm-for-ems/</link>
				<guid isPermaLink="true">http://manageering.us/2017/11/03/mvvm-for-ems/</guid>
			</item>
		
			<item>
				<title>The one on one structure</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;When I first went headfirst into the EM role I must admit, I was winging it. I went from a tech lead position, to an organically found management position, then when the title flipped it suddenly the game changed. Expectations of conducting 1:1’s were not part of my duties. No one mentioned the purpose of a 1:1, let alone what you do in a 1:1. I have to admit, it was mainly just a sync up on what people were working on. I didn’t like it, it felt… awkward.&lt;/p&gt;

&lt;p&gt;The awkwardness got to a point where 1:1’s would start to slip off the calendar. It would only be until something had to be said that we would have a “1:1”. Where did that leave me? Well, in a place where a 1:1 would be a thing to dread. I was in a tight space, little mentorship and no pathway out. I reached out to a friend who put me onto the book &lt;a href=&quot;http://amzn.to/2zeUl2h&quot;&gt;The Effective Manager&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The book talks about many things. One thing I’ll delve into now from the book is the structure of a 1:1. It helped me effectively use the time in my 1:1’s. By following the structure it made me, and I hope my direct, look forward to 1:1’s.&lt;/p&gt;

&lt;h2 id=&quot;you-talk&quot;&gt;You talk&lt;/h2&gt;

&lt;p&gt;A one on one isn’t just you talking to the direct. See a critical component in the employee to manager relationship, is, as you guessed it, trust. You need to build trust, be constantly building it. Too often managers go into one on ones and use it as their venting session, or to just talk about something the direct did wrong. Why would a direct open up to you and confide in you when either a) It’s just you talking or b) you just scold them for something they might of done inadequately. So this first 10mins should be left to your direct to talk.&lt;/p&gt;

&lt;p&gt;Open up the 1:1 with something like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Tell me what’s going on in your world?&lt;/li&gt;
  &lt;li&gt;How’s your week been?&lt;/li&gt;
  &lt;li&gt;What are you up to these days?&lt;/li&gt;
  &lt;li&gt;How’d you go this week?&lt;/li&gt;
  &lt;li&gt;How are you?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Leave it open ended, because really, this 1:1 is mainly about them. If they use the entire time up to speak, then so be it. It’s a great way to build the trust, by showing that this is a safe environment to confide in. Of course try and converse with the individual, prod for more elaboration or provide some additional insight, but this time isn’t yours, it’s all about them.&lt;/p&gt;

&lt;h2 id=&quot;now-i-talk&quot;&gt;Now I talk&lt;/h2&gt;

&lt;p&gt;This part is you to provide insight into what you’re up to. Share your perspective on how the team or individual is going. Provide some background story on the week and share some details that may smooth over some uncertainty. It could be a simple status update as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;That outage this week was because of the oracle slave server hanging. That caused an outage downstream and we got hit with a deluge of complaints as we’re the client. I think we might have a post-mortem coming up for it.&lt;/li&gt;
  &lt;li&gt;I’ve been trying to get some developers from other teams to come over and talk about MVVM with us.&lt;/li&gt;
  &lt;li&gt;We’re doing well with recruitment, I want to thank you for your involvement with that.&lt;/li&gt;
  &lt;li&gt;Let’s talk about James leaving, how do you think the team is? I’m thinking perhaps we get an API engineer in as a replacement to better purpose the role for a gap in our team skills.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is another 10mins worth of just you talking. Don’t be detracted if this turns into a conversation and don’t block your direct out. If they want more clarification or details into what you’re discussing, that is a data point in itself. Give them the data and use that to calculate whether or not to open the discussion up wider to the rest of the team.&lt;/p&gt;

&lt;h2 id=&quot;the-future&quot;&gt;The future&lt;/h2&gt;

&lt;p&gt;The last whatever minutes you have are now to discuss goals. Short term and long term goals. Discuss what the next week looks like. Opportunities ahead and how you see that the direct can capitalize on any that are at their disposal. Discuss some areas of weakness you feel that they should concentrate and focus on in the next week. Revisit larger goals and discuss their progress. Keep the eye on the prize.&lt;/p&gt;

&lt;p&gt;Sure discussions of promotions may come up in these 1:1’s when you discuss the future. I will do a separate post on how to discuss promotions. For now feel free to discuss that in the realm of long term goals. If that is the most pertinent goal then so be it, but relate it back to pressing matters in the short and long term. Relate it back to the goals you have hopefully setup with them in the past 3 months.&lt;/p&gt;

&lt;h2 id=&quot;the-implementation-details&quot;&gt;The implementation details&lt;/h2&gt;

&lt;p&gt;Setup your 1:1’s for a tight feedback loop. Keep your ability to calibrate tight and in-turn with the world that the individual is operating in. Like goals, keep your influence as agile as possible. For this reason I hold my 1:1’s weekly. They’re added to both my direct’s and my own calendars and repeat weekly. I check in with my direct before scheduling to try find a time that works for us both. Once its on the calendar it signifies to the individual that their time is important to me and that I am not above dedicating 30mins a week to them, because I’m not. It’s my job and this is a tool to do my job.&lt;/p&gt;

&lt;p&gt;So 30mins for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;10 - 30mins for them&lt;/li&gt;
  &lt;li&gt;10mins for me (if there is time)&lt;/li&gt;
  &lt;li&gt;10mins for the future (if there is time)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-effective-manager&quot;&gt;The Effective Manager&lt;/h2&gt;

&lt;p&gt;Now there may be push back if you’ve held off for so long to get 1:1’s onto the calendar. “Not another meeting”! is something you may hear. Perhaps you’ve used 1:1’s in the past only for negative feedback and your direct is rejecting the fact they need more of the past. Try and rebuild the trust and run them through the proposed feedback.&lt;/p&gt;

&lt;p&gt;I highly recommend reading &lt;a href=&quot;http://amzn.to/2zeUl2h&quot;&gt;The Effective Manager&lt;/a&gt;. They go into much more detail on what to say in 1:1’s when you’re just starting them up for the first time. How to prove their value, and what to do when a direct flat out says no. Please read it. It seriously changed my approach to management and gave me the confidence needed. It more importantly gave me back one of the most effective management tools in my toolkit.&lt;/p&gt;
</description>
				
				<pubDate>Thu, 02 Nov 2017 00:00:00 -0700</pubDate>
				<link>http://manageering.us/2017/11/02/the-one-on-one/</link>
				<guid isPermaLink="true">http://manageering.us/2017/11/02/the-one-on-one/</guid>
			</item>
		
			<item>
				<title>Should an Engineering Manager Know How to Code</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;Firstly what is an engineering management position? It is an odd role, its not a tech lead, but its not strictly a HR management position either. As an EM you are expected to get results from a team of technically minded people; developers, QA; and get all technical stakeholders in sync. So does that mean you should be in the weeds and be writing and reading code?&lt;/p&gt;

&lt;h2 id=&quot;being-able-to-relate&quot;&gt;Being able to relate&lt;/h2&gt;

&lt;p&gt;A key part to management and any leadership position is your ability to influence. There are many mechanisms and tools at your disposal, however one key tool I find that has helped me is being able to relate to my directs. Relating to what they’re working on, the challenges they face, opportunities at their disposal and, very importantly, deeply understanding the current toolset and ecosystem by which they operate in.&lt;/p&gt;

&lt;p&gt;Not being able to relate to your directs indicates a disconnect. A lack of understanding of what they’re up against, their priorities, their difficulties. Relating also comes in the form of their career progression. What does it take to get to the next level? Do you know what that even entails or means for this individual? If you can’t relate to them and their circumstances how can you communicate effectively, more importantly how can you influence the individual?&lt;/p&gt;

&lt;p&gt;One step further how are you able to influence a team without understanding what they’re talking about? Here is a real world example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We’re thinking about moving towards MVVM and leaving behind MVC. We want to do this for the next project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;the-respect&quot;&gt;The respect&lt;/h2&gt;

</description>
				
				<pubDate>Thu, 02 Nov 2017 00:00:00 -0700</pubDate>
				<link>http://manageering.us/2017/11/02/should-ems-know-how-to-code/</link>
				<guid isPermaLink="true">http://manageering.us/2017/11/02/should-ems-know-how-to-code/</guid>
			</item>
		
			<item>
				<title>Putting Your Shoes On Is The Hardest Part</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;It’s the old adage:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The hardest part of getting fit, is putting your shoes on&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s play this out for a little bit. You’ve probably had a time in the past where you’ve promised yourself “tomorrow I’m going to wake up early and go for a run” or “when I get home from work, I’m going to spend an hour working on the back deck”. What actually happens is you never take the first movement at crunch time to make it happen. You either got distracted, demotivated or the snooze button got slammed and you and your trainers got to sleep in longer.&lt;/p&gt;

&lt;p&gt;I would like to present various ways that I’ve overcome this first, yet difficult step.&lt;/p&gt;

&lt;h2 id=&quot;its-all-downhill-when-you-have-routine-on-your-side&quot;&gt;It’s all downhill when you have routine on your side&lt;/h2&gt;

&lt;p&gt;I want to promise you that once you start taking these difficult first steps, the feeling of resistance, distraction, demotivation will falter. Taking the first step will turn into a natural reflex. You can multitask whilst setting yourself up for the next morning, or unconsciously prepare your mind for the duties that await you when you walk through the front door at home.&lt;/p&gt;

&lt;p&gt;Once you have routine on your side, it becomes less of setting up for the task and rather about the task itself.&lt;/p&gt;

&lt;h2 id=&quot;techniques-to-make-routine-your-friend&quot;&gt;Techniques to make routine your friend&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Accountability buddy&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Finding someone to hold you accountable is the easiest means to ensuring you hold the commitment you made to yourself. You’re no longer disappointing yourself, you’re breaking a promise to another individual, friend, group, whatever. I find that this is enough to compel you to break even the deepest of sleeps.&lt;/p&gt;

    &lt;p&gt;Its also adds an element of companionship to that you may already look forward to. Yes, it makes it fun! Harness this promise and commitment. Its one thing to lie to yourself and let yourself get away with it. But its another thing to let someone down, and also your image and trustworthiness falter.&lt;/p&gt;

    &lt;p&gt;If the activity is rather an individual activity, like, flossing your teeth, then just vocalize to a friend, partner, dog or cat that you will begin flossing your teeth every night. Let your actions have some sort of visibility to build some level of accountability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Join a group&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;See where I’m going with this whole social aspect to creating a routine. Another avenue is joining a group, or getting multiple people involved in what you’re setting out to do. Perhaps that is joining a meetup group. Or it could be simply being around people, like going to a library, to start seeing familiar faces. Often people take a lot of joy in going to a cafe and simply being around others as a means of committing to whatever they have set out to achieve (with the bonus of getting coffee and a bagel).&lt;/p&gt;

    &lt;p&gt;There are also online forums you can join to participate and help track and keep you in check for your target. Simply by reaching out for assistance and stating to the ether that you will do something, adds a lot more weight to you actually lacing up those trainers, or getting the hammer out, or dusting off the guitar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Set a goal&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Setting a goal sounds like a given, right? Well not having a goal and saying “I’ll go for a run tomorrow” is not a goal. Getting fit, getting to a certain weight, completing the back deck before Christmas time, finishing a book each month, doing yoga 2 times a month, are goals.&lt;/p&gt;

    &lt;p&gt;So how do you start with setting a goal? If its sports, give yourself a weight, a distance, a time, a frequency for example. If its a project, a hobby or a ritual, give yourself a deadline, or a quota. Don’t let the activity just become a lonely task. Let you task amount to a step in achieving a goal. It adds more accountability to the task and subsequent tasks thereafter. Set your sights on an attainable goal and nail it!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Join a challenge&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;There are so many online resources at your disposal for joining a challenge. There are online bookclubs, where you will finish a book before the meetup. There of course are the online sporting resources: Strava, RunKeeper, Fitocracy, MapMyRun, Garmin Connect. There are also forums where you can post your status or mark your activities.&lt;/p&gt;

    &lt;p&gt;I personally love seeing DIY projects from the ground up on a forum getting posted in stages. I also love the comments from others which is perpetuating the exponential growth of the project. Its addictive!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Keep a journal or blog&lt;/strong&gt;&lt;/p&gt;

    &lt;p&gt;Dear diary is powerful tool. Your thoughts on paper is a great reflection tool. Its also a great way to examine thoughts in a slower pace, to which you can analyze future behaviors or set aspirations to work towards. It can be private or it can be public and out in the open as a blog can be. Posting to instagram during an activity also helps build an attachment and spark of excitement to bring you to the first step out or in the door.&lt;/p&gt;

    &lt;p&gt;One catch to this however is ensure that it become as much a habit as the task you’re getting into. Make it be as much of the doing the task rather than an auxiliary. Remember, these are tools to support you to build a routine. The sooner you give up blogging or journaling, the sooner you give up building the routine.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;get-inspired&quot;&gt;Get inspired&lt;/h2&gt;

&lt;p&gt;There are plenty of inspiring books out there that I have read that are either rags to riches, or zero to hero. Here are a few that had me totally engrossed in the story:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zqbXJB&quot;&gt;Finding Ultra: Rejecting Middle Age, Becoming One of the World’s Fittest Men, and Discovering Myself&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zpKesp&quot;&gt;The Girl with the Lower Back Tattoo&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zpKIid&quot;&gt;Wild&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2zqd4sL&quot;&gt;I Can’t Make This Up: Life Lessons&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Wed, 01 Nov 2017 00:00:00 -0700</pubDate>
				<link>http://manageering.us/2017/11/01/putting-shoes-on-is-the-hardest-part/</link>
				<guid isPermaLink="true">http://manageering.us/2017/11/01/putting-shoes-on-is-the-hardest-part/</guid>
			</item>
		
			<item>
				<title>Many Books Many Similar Learnings</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;I’ve read a fair few books in the past 2 years. Some self help books, others specific to management. After a while the messages all seem to blur together. How to have composure, foresight, goal setting, communicating, motivating, leading, physical/mental health, all seem to have a general theme. For the time being I’m going to try and be succinct as possible and provide a list of over arching themes. But I do recommend the following books.&lt;/p&gt;

&lt;h2 id=&quot;the-books&quot;&gt;The books&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A8VEho&quot;&gt;The Effective Manager&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A8dNvU&quot;&gt;Braving the Wilderness: The Quest for True Belonging and the Courage to Stand Alone&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A7uibp&quot;&gt;The Miracle Morning: The Not-So-Obvious Secret Guaranteed to Transform Your Life (Before 8AM)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A4R43z&quot;&gt;Awaken the Giant Within: How to Take Immediate Control of Your Mental, Emotional, Physical and Financial&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A8XBue&quot;&gt;Mindset: The New Psychology of Success&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A7eZzv&quot;&gt;The Compound Effect&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-themes&quot;&gt;The themes&lt;/h2&gt;

&lt;p&gt;Now a lot of this can be borrowed from the &lt;a href=&quot;http://amzn.to/2A7uibp&quot;&gt;Miracle Morning&lt;/a&gt;; though that is not to say all of this is limited to the morning. Hal Elrod broke down a lot of the themes into broad sections. I won’t list them out specifically as some can be split up. I do however recommend reading that book as a great first start into some ceremonies you can incorporate into your day…. if you’re not a morning person.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reflection&lt;/strong&gt; - gathering thoughts from previous actions or encounters. Articulate them, verbally or written.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Meditation&lt;/strong&gt; - quieten the mind, raise your senses&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Visualization&lt;/strong&gt; - imagine where you want to be, or an analogy of a race car driver “If you don’t want to crash, look where you want to go”&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Believe&lt;/strong&gt; - change your belief systems. Remove any self imposed limitations on your thoughts and simply do. Holding oneself back is the first step backwards.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Exercise&lt;/strong&gt; - get those endorphins flowing and your attention into the now&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Compound&lt;/strong&gt; - small changes in yourself, your routine and your beliefs ultimately compound upon massive change&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Vocabulary&lt;/strong&gt; - Flip the negative and deprecative tone to look towards solutions or positive motion&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;External Force&lt;/strong&gt; - There is some talk of a higher power in some of these books. I previously thought I was on the Nihilist camp; in that, rejection of religion and all the principles and stigma attached. However some books rather linked a belief in any higher power, even if that higher power was a stuffed animal on your desk, as a means of removing self absorbed interest in oneself and shifting focus outside. Interesting concept and a way to remind yourself, you are not the center of the universe… until science proves otherwise.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Disrupt&lt;/strong&gt; - If a mental image comes to mind, you have the ability to distort it and thus alter the image retrieved at a future time. Add color, add tone, add a different perspective. The original emotion will be altered next time you come across this artifact.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Neural Pathways&lt;/strong&gt; - Be aware that your brain is a series of pathways. Like a park, paths form from higher traffic, or, if they’re used more. The more you practice a positive or negative task, the more reinforcement you’re physically forming in your brain. Habits happen, habits can be exercised.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Connectedness&lt;/strong&gt; - Connect with people. Find groups. Find relationships, build networks. Find belonging not find yourself trying to “fit in”.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Focus on Breath&lt;/strong&gt; - Like these pathways, reactions become instinctual. Control adrenaline responses and slow the mind by focusing on your breath. Connect your body in a short moment and slow your mind to control your reaction going forward.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so-what-am-i-doing-with-it&quot;&gt;So what am I doing with it?&lt;/h2&gt;

&lt;p&gt;It has been great to delve into different practices and start to incorporate them into my daily life. For instance, this falls into the reflection component. However more importantly a lot of these components have opened my eyes up to behaviour and widened my toolset for approaching or confronting issues.&lt;/p&gt;

&lt;p&gt;One point I left out of this list is reading. I will not stop reading. Different perspectives open the mind and challenge oneself. I’ll continue to update this post with more books and learnings.&lt;/p&gt;

&lt;h2 id=&quot;more-inspirational-books&quot;&gt;More inspirational books&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A6FsgD&quot;&gt;Wild&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A8B8NN&quot;&gt;The Long Haul: A Trucker’s Tales of Life on the Road &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://amzn.to/2A82Fif&quot;&gt;The Hard Thing About Hard Things: Building a Business When There Are No Easy Answers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				
				<pubDate>Wed, 01 Nov 2017 00:00:00 -0700</pubDate>
				<link>http://manageering.us/2017/11/01/many-books-many-similar-learnings/</link>
				<guid isPermaLink="true">http://manageering.us/2017/11/01/many-books-many-similar-learnings/</guid>
			</item>
		
			<item>
				<title>What makes performance</title>
				
					
						<dc:creator>RS</dc:creator>
					
				
				
					<description>&lt;p&gt;As managers, we all want our teams to succeed. To generate results. To achieve contribute to achieving the company’s objectives. Monitoring &amp;amp; calibrating efforts that affect your team’s performance is&lt;/p&gt;

</description>
				
				<pubDate>Thu, 19 Oct 2017 00:00:00 -0700</pubDate>
				<link>http://manageering.us/2017/10/19/youre-an-entertainer/</link>
				<guid isPermaLink="true">http://manageering.us/2017/10/19/youre-an-entertainer/</guid>
			</item>
		
	</channel>
</rss>
